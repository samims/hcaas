// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"

	"github.com/samims/hcaas/services/auth/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserStorage creates a new instance of MockUserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStorage {
	mock := &MockUserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserStorage is an autogenerated mock type for the UserStorage type
type MockUserStorage struct {
	mock.Mock
}

type MockUserStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStorage) EXPECT() *MockUserStorage_Expecter {
	return &MockUserStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserStorage
func (_mock *MockUserStorage) CreateUser(ctx context.Context, email string, hashedPass string) (*model.User, error) {
	ret := _mock.Called(ctx, email, hashedPass)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return returnFunc(ctx, email, hashedPass)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = returnFunc(ctx, email, hashedPass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, hashedPass)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - hashedPass string
func (_e *MockUserStorage_Expecter) CreateUser(ctx interface{}, email interface{}, hashedPass interface{}) *MockUserStorage_CreateUser_Call {
	return &MockUserStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, email, hashedPass)}
}

func (_c *MockUserStorage_CreateUser_Call) Run(run func(ctx context.Context, email string, hashedPass string)) *MockUserStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserStorage_CreateUser_Call) Return(user *model.User, err error) *MockUserStorage_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStorage_CreateUser_Call) RunAndReturn(run func(ctx context.Context, email string, hashedPass string) (*model.User, error)) *MockUserStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserStorage
func (_mock *MockUserStorage) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStorage_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserStorage_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserStorage_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserStorage_GetUserByEmail_Call {
	return &MockUserStorage_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserStorage_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserStorage_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserStorage_GetUserByEmail_Call) Return(user *model.User, err error) *MockUserStorage_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStorage_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*model.User, error)) *MockUserStorage_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockUserStorage
func (_mock *MockUserStorage) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserStorage_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockUserStorage_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserStorage_Expecter) Ping(ctx interface{}) *MockUserStorage_Ping_Call {
	return &MockUserStorage_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockUserStorage_Ping_Call) Run(run func(ctx context.Context)) *MockUserStorage_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserStorage_Ping_Call) Return(err error) *MockUserStorage_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserStorage_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockUserStorage_Ping_Call {
	_c.Call.Return(run)
	return _c
}
